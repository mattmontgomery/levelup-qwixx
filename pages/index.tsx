import Head from "next/head";
import { useEffect, useState } from "react";
import Board from "../app/components/Board";
import Die from "../app/components/Die";
import { Game } from "../app/lib/game";
import styles from "../styles/Home.module.css";
import events from "events";
// import Pusher from "pusher-js";

export default function Home() {
  const [game, setGame] = useState<Game>();
  const [dice, setDice] = useState<Game.Dice>([]);
  const [board, setBoard] = useState<Game.Board>(Game.getEmptyBoard());
  const [selectedDice, setSelectedDice] = useState<Game.Dice>([]);
  useEffect(() => {
    const emitter = new events.EventEmitter();
    const emitterMethod = (board: Game.Board) => {
      setBoard(board);
    };
    emitter.on("board", emitterMethod);
    setGame(Game.init(emitter));
    return () => {
      emitter.off("board", emitterMethod);
    };
  });
  // TODO: get the game up and running
  // TODO: Deploy
  // TODO: Add real-time dice rolling so everyone has the same dice available to them
  // TODO: Deploy
  // TODO: Add even more features!!
  // TODO: Deploy
  return !game ? (
    <></>
  ) : (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <div>
          <button
            onClick={() => {
              setSelectedDice([]);
            }}
          >
            Reset selection
          </button>
        </div>
        <div
          style={{
            padding: "1rem",
            display: "grid",
            gridTemplateColumns: `repeat(6, 1fr)`,
            gridColumnGap: "1rem",
          }}
        >
          {dice.map((d, idx) => (
            <Die
              clickable={
                selectedDice.length < 2 &&
                ((d.color === "white" &&
                  !selectedDice.find((d) => d.color === "white")) ||
                  (d.color !== "white" &&
                    !selectedDice.find((d) => d.color !== "white")))
              }
              selected={
                !!selectedDice.find(
                  (dd) => dd.color === d.color && dd.number === d.number
                )
              }
              color={d.color as Game.Colors}
              number={d.number}
              key={idx}
              onClick={(ev) =>
                setSelectedDice([
                  ...selectedDice,
                  { color: d.color, number: d.number },
                ])
              }
            />
          ))}
        </div>
        <div
          style={{
            padding: "1rem",
          }}
        >
          <Board
            board={board}
            eligible={{
              color: selectedDice
                .map((d) => d.color)
                .filter((c) => c !== "white")?.[0],
              number: selectedDice?.[0]?.number + selectedDice?.[1]?.number,
            }}
            onSelectNumber={(number, color): void => {
              game.selectNumber(color, number);
              setSelectedDice([]);
            }}
          />
        </div>
      </main>
    </div>
  );
}
